buildscript {

    ext {
        springBootVersion = '1.5.1.RELEASE'
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.liquibase:liquibase-gradle-plugin:1.1.1"
        classpath "mysql:mysql-connector-java:5.1.27"
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'liquibase'
apply plugin: 'java'
apply plugin: 'spring-boot'

loadConfiguration()

jar {
    baseName = 'graffitab'
    version = '0.1'

    manifest {
        attributes 'Main-Class': 'com.graffitab.server.GraffitabApplication'
    }
}

test {
	testLogging {
		events "passed", "skipped", "failed"
		exceptionFormat = 'full'
	}
}

bootRepackage {
    excludeDevtools = project.ext.excludeDevtools
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}


// Gradle Tool Window in IntelliJ IDEA:
// https://www.jetbrains.com/idea/help/manipulating-the-tool-windows.html

// Some global properties

ext.configDir = "conf"

def springVersion = "4.2.3.RELEASE"
def jstlVersion = "1.1.2"
def hibernateVersion = "4.3.5.Final"
def c3p0Version = "0.9.1.2"
def tilesVersion = "3.0.0"
def mysqlVersion = "5.1.27"
def jacksonVersion = "2.7.3"
def commonsIoVersion = "2.4"
def log4jVersion = "2.1"
def slf4jVersion = "1.7.7"
def jUnitVersion = "4.9"
def mockitoVersion = "1.9.5"
def jsonPathVersion = "2.0.0"
def hsqldbVersion = "2.2.8"
def orikaVersion = "1.4.6"
def awsVersion = "1.10.44"
def jodaTimeVersion = "2.9.2"
def jadiraVersion = "5.0.0.GA"
def sendgridVersion = "2.2.2"
def pushSenderVersion = "1.0.2"
def javatuplesVersion = "1.2"
def facebook4jVersion = "2.4.5"
def imageScalingVersion = "0.8.6"
def commonsFileuploadVersion = "1.3.1"
def boneCpVersion = "0.8.0.RELEASE"

//http://docs.spring.io/spring-security/site/migrate/current/3-to-4/html5/migrate-3-to-4-jc.html
def springSecurityVersion = "4.0.3.RELEASE"
def springSessionVersion = "1.2.0.RELEASE"

List jackson = ["com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}",
                "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}"
]

List spring = [ "org.springframework:spring-tx:$springVersion",
                "org.springframework:spring-orm:$springVersion",
                "org.springframework:spring-test:$springVersion"]

List springSecurity = ["org.springframework.security:spring-security-core:${springSecurityVersion}",
                       "org.springframework.security:spring-security-web:${springSecurityVersion}",
                       "org.springframework.security:spring-security-config:${springSecurityVersion}",
                       "org.springframework.security:spring-security-taglibs:${springSecurityVersion}"]


List log4j = [
        "org.apache.logging.log4j:log4j-1.2-api:$log4jVersion",
        "org.apache.logging.log4j:log4j-core:$log4jVersion",
        "org.apache.logging.log4j:log4j-slf4j-impl:$log4jVersion",
        "org.apache.logging.log4j:log4j-api:$log4jVersion"
]

List slf4j = [
        "org.slf4j:slf4j-api:$slf4jVersion",
        "org.slf4j:slf4j-ext:$slf4jVersion"
]

configurations {

    all.collect { configuration ->
        configuration.exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
}

dependencies {

    compile "javax.servlet:jstl:$jstlVersion",
            "taglibs:standard:$jstlVersion",
            "c3p0:c3p0:$c3p0Version",
            "mysql:mysql-connector-java:$mysqlVersion",
            "org.hibernate:hibernate-core:$hibernateVersion"

    compile("org.apache.tiles:tiles-core:$tilesVersion") {
        exclude module: "jcl-over-slf4j"
    }

    compile("org.slf4j:jcl-over-slf4j:$slf4jVersion") {
        exclude module: "slf4j-api"
    }

    compile("org.apache.tomcat.embed:tomcat-embed-jasper")

    // Logging
    slf4j.each { artifact ->
        compile artifact, {
            exclude group: 'ch.qos.cal10n'
        }
    }

    compile "commons-io:commons-io:$commonsIoVersion"

    compile spring, jackson, log4j

    compile "ma.glasnost.orika:orika-core:$orikaVersion"

    compile "commons-fileupload:commons-fileupload:$commonsFileuploadVersion"

    compile "com.amazonaws:aws-java-sdk-s3:$awsVersion"

    compile "org.projectlombok:lombok:1.16.6"

    compile "joda-time:joda-time:$jodaTimeVersion"

    compile "org.jadira.usertype:usertype.core:$jadiraVersion"

    compile "com.devsu:push-sender:$pushSenderVersion"

    compile "org.javatuples:javatuples:$javatuplesVersion"

    compile "org.facebook4j:facebook4j-core:$facebook4jVersion"

    compile "com.mortennobel:java-image-scaling:$imageScalingVersion"

    // for OAuth 2.0
    compile 'org.springframework.security.oauth:spring-security-oauth2:2.0.8.RELEASE'
    compile 'org.json:json:20151123'
    compile 'org.apache.commons:commons-dbcp2:2.1.1'

    // Spring Boot
    compile 'org.springframework.boot:spring-boot-starter'
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter-security'
    compile 'org.springframework.boot:spring-boot-starter-aop'
    compile "com.sendgrid:sendgrid-java:$sendgridVersion"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-joda:$jacksonVersion"
    compile "com.jolbox:bonecp:$boneCpVersion"
    compile "org.springframework.session:spring-session-data-redis:$springSessionVersion"
    compile "org.springframework.session:spring-session:$springSessionVersion"
    compile("org.springframework.boot:spring-boot-starter-thymeleaf")

    //if (project.ext.excludeDevtools) {
    //    compile('org.springframework.boot:spring-boot-devtools') { transitive = false }
    //} else {
        compile('org.springframework.boot:spring-boot-devtools')
    //}

    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile 'org.springframework.security:spring-security-test:4.0.3.RELEASE'
    testCompile 'org.subethamail:subethasmtp-wiser:1.2'
    testCompile 'net.kemitix:wiser-assertions:0.3.1'
    testCompile 'javamail:javamail:1.3.3'
    testCompile "com.mortennobel:java-image-scaling:$imageScalingVersion"

    runtime "mysql:mysql-connector-java:$mysqlVersion"

    testCompile "junit:junit:$jUnitVersion"
    testCompile "org.mockito:mockito-core:$mockitoVersion"
    testCompile "com.jayway.jsonpath:json-path:$jsonPathVersion"
    testCompile "org.hsqldb:hsqldb:$hsqldbVersion"
    testCompile "commons-fileupload:commons-fileupload:$commonsFileuploadVersion"

}


// == Liquibase ==

liquibase {
  activities {
    main {
      changeLogFile "database/database-update/database-changelog.xml"
      url "$jdbcUrl"
      username "$dbUser"
      password "$dbPassword"
      classpath "$rootDir"
    }
  }

  runList = 'main'
}

/**
 These can be passed from the command line like -Penv=value
*/
def loadConfiguration() {

    def env = hasProperty('env') ? env : 'local'
    def redisPassword = hasProperty('redisPassword') ? redisPassword : ''
    def excludeDevtools = hasProperty('excludeDevtools') ? Boolean.parseBoolean(excludeDevtools) : true

    project.ext.env = env
    project.ext.redisPassword = redisPassword
    project.ext.excludeDevtools = excludeDevtools

    println "=== Environment is $env ==="
    println "Exclude Devtools: " + project.ext.excludeDevtools

    // defaults to local
    def configFile = 'conf/application.properties'

    if (env == 'digitalOcean') {
        configFile = 'conf/application-digitalocean.properties'
    }

    // load properties
    def appProperties = new Properties()
    file(configFile).withInputStream {
        appProperties.load(it)
    }

    // copy environment specific properties file and rename to application.properties
    copy {
        from configFile
        into 'src/main/resources'
        rename { String fileName ->
            fileName = "application.properties"
        }
    }

    // Default to local
   if (env == 'local') {
       // No environment variables when running locally
       println("Reading config for local environment")
       ext.dbHost = appProperties.getProperty("db.host")
       ext.dbPort = appProperties.getProperty("db.port")
       ext.dbName = appProperties.getProperty("db.name")
       ext.jdbcUrl = "jdbc:mysql://${dbHost}:${dbPort}/${dbName}?useUnicode=true&amp;characterEncoding=UTF-8"
       ext.dbUser = appProperties.getProperty("db.username")
       ext.dbPassword = appProperties.getProperty("db.password")
   }

    if  (env == 'digitalOcean') {
        println("Reading config for DigitalOcean from environment")

        // Tidy up the strings in properties file so they can be read directly as env variables
        ext.dbHost = System.getenv(appProperties.getProperty("db.host")?.replace("\$","").replace("{","").replace("}",""))
        ext.dbPort = System.getenv(appProperties.getProperty("db.port")?.replace("\$","").replace("{","").replace("}",""))
        ext.dbName = System.getenv(appProperties.getProperty("db.name")?.replace("\$","").replace("{","").replace("}",""))
        ext.jdbcUrl = "jdbc:mysql://${dbHost}:${dbPort}/${dbName}?useUnicode=true"
        ext.dbUser = System.getenv(appProperties.getProperty("db.username")?.replace("\$","").replace("{","").replace("}",""))
        ext.dbPassword = System.getenv(appProperties.getProperty("db.password")?.replace("\$","").replace("{","").replace("}",""))
    }

    println "JDBC Url: " + ext.jdbcUrl
}

task clean (type: Delete, overwrite: true) {

    doFirst {
        println "Cleaning files: $buildDir"
    }

    delete file("$buildDir")
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}

task buildClient(type:Exec) {

  doFirst {
    println "[client-build] Deleting any prebuilt files..."
    delete('src/main/resources/public/main.js')
  }

  doLast {
	  println "[client-build] Copying built file to public folder"
	  copy {
        from 'GraffiTab-Frontend/build/public/assets'
        into 'src/main/resources/public'
        include 'main.js'
      }
  }

  workingDir 'GraffiTab-Frontend'
  commandLine './build.sh'
}

/**
 *
 * Builds the JAR and renames it to graffitab.jar into the root project dir
 *
 */
task stage(type:Copy) {
    dependsOn clean, assemble
    from jar.archivePath
    into project.rootDir
    rename {
        'graffitab.jar'
    }
}
stage.mustRunAfter(clean)

task updateDb() {
  dependsOn update
  doFirst {
      println "Migrations for environment - $project.env"
  }
}

task runDocker(type:Exec) {
    commandLine './run-docker.sh', "${project.ext.redisPassword}"
}

task stopDocker(type:Exec) {
    commandLine 'docker-compose', 'down'
}

task devBuild() {
  dependsOn processResources, compileJava
  doFirst {
     println "Task devBuild was successful"
  }
}

//TODO: adapt to DigitalOcean startup
task pollForStartup() {

  doLast {
   def data = "http://dev.graffitab.com/status".toURL().text

   if (data.contains('OK')) {
   	println("--- SUCCESS: App started --");
   } else {
   	println("--- WARN: Status endpoint did not return expected value: " + data);
   }
  }
}

// Spring Boot startup with Gradle
bootRun.dependsOn processResources
