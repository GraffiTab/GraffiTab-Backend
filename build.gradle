buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.liquibase:liquibase-gradle-plugin:1.1.1"
        classpath "mysql:mysql-connector-java:5.1.27"
    }
}

apply plugin: 'liquibase'

import org.apache.tools.ant.filters.*

apply plugin: 'java'
apply plugin: 'war'


// Gradle Tool Window in IntelliJ IDEA:
// https://www.jetbrains.com/idea/help/manipulating-the-tool-windows.html

repositories {
    mavenCentral()
}

def webappRootDir = "src/main/webapp"
ext.libDir = file("$webappRootDir/WEB-INF/lib")
sourceSets.main.output.classesDir =  file("$webappRootDir/WEB-INF/classes")
sourceSets.main.output.resourcesDir =  file("$webappRootDir/WEB-INF/classes")

def springVersion = "4.2.2.RELEASE"
def jspVersion = "2.1"
def jstlVersion = "1.1.2"
def servletVersion = "3.0"
def hibernateVersion = "4.3.5.Final"
def c3p0Version = "0.9.1.2"
def tilesVersion = "3.0.0"
def mysqlVersion = "5.1.27"
def jacksonVersion = "2.3.0"
def junitVersion = "4.11"
def commonsCodecVersion = "1.8"
def commonsIoVersion = "2.4"
def cglibVersion = "2.1_3"
def log4jVersion = "2.1"
def slf4jVersion = "1.7.7"
def springSecurityVersion = "3.2.0.RELEASE"
def jUnitVersion = "4.9"
def mockitoVersion = "1.9.5"
def jsonPathVersion = "2.0.0"
def hsqldbVersion = "2.2.8"


List jackson = ["com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}",
                "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}"
]

List spring = [ "org.springframework:spring-webmvc:$springVersion",
                "org.springframework:spring-tx:$springVersion",
                "org.springframework:spring-orm:$springVersion",
                "org.springframework:spring-core:$springVersion",
                "org.springframework:spring-test:$springVersion",
                "org.springframework:spring-test:$springVersion"]

List springSecurity = ["org.springframework.security:spring-security-core:${springSecurityVersion}",
                       "org.springframework.security:spring-security-web:${springSecurityVersion}",
                       "org.springframework.security:spring-security-config:${springSecurityVersion}",
                       "org.springframework.security:spring-security-taglibs:${springSecurityVersion}"]


List log4j = [
        "org.apache.logging.log4j:log4j-1.2-api:$log4jVersion",
        "org.apache.logging.log4j:log4j-core:$log4jVersion",
        "org.apache.logging.log4j:log4j-slf4j-impl:$log4jVersion",
        "org.apache.logging.log4j:log4j-api:$log4jVersion"
]

List slf4j = [
        "org.slf4j:slf4j-api:$slf4jVersion",
        "org.slf4j:slf4j-ext:$slf4jVersion"
]

dependencies {

   compile "javax.servlet.jsp:jsp-api:$jspVersion",
           "javax.servlet:jstl:$jstlVersion",
           "taglibs:standard:$jstlVersion",
           "c3p0:c3p0:$c3p0Version",
           "mysql:mysql-connector-java:$mysqlVersion",
           "org.hibernate:hibernate-core:$hibernateVersion"

   compile ("org.apache.tiles:tiles-core:$tilesVersion") {
          exclude module: "jcl-over-slf4j"
   }

   compile "org.apache.tiles:tiles-jsp:$tilesVersion"

   compile ("org.slf4j:jcl-over-slf4j:$slf4jVersion") {
       exclude module: "slf4j-api"
   }

    // Logging
    slf4j.each { artifact ->
        compile artifact, {
            exclude group: 'ch.qos.cal10n'
        }
    }

   compile "commons-io:commons-io:$commonsIoVersion"

   compile spring, springSecurity, jackson, log4j

   providedCompile group: 'javax.servlet', name: 'javax.servlet-api', version: '3.0.1'
   providedCompile group: 'javax.servlet.jsp', name: 'jsp-api', version: '2.1'

   runtime "mysql:mysql-connector-java:$mysqlVersion"
   
   testCompile "junit:junit:$jUnitVersion"
   testCompile "org.mockito:mockito-core:$mockitoVersion"
   testCompile "com.jayway.jsonpath:json-path:$jsonPathVersion"
   testCompile "org.hsqldb:hsqldb:$hsqldbVersion"
}

// == Liquibase ==

loadConfiguration()

liquibase {
  activities {
    main {
      changeLogFile "$rootProject.projectDir/src/main/resources/database-update/database-changelog.xml"
      url "$jdbcUrl"
      username "$dbUser"
      password "$dbPassword"
    }
  }

  // runList = project.ext.runList
  // runList = 'main'
  runList = 'main'
}


processResources {
    filter(ReplaceTokens, tokens: config)
}

war {
  archiveName = "graffitab.war"  
}

def loadConfiguration() {
    // This can be passed from the command line like -Penv=value
    def conf = hasProperty('env') ? env : 'local'
    def configDir = "conf"
    project.ext.conf = conf
    
    println "=== Environment is $conf ==="
    
    def configFile = file("$configDir/environments.groovy")
    def config = new ConfigSlurper("$conf").parse(configFile.toURL())
    
    def dbHost = System.getenv("DB_HOST")
    def dbName = System.getenv("DB_NAME")
    def dbUser = System.getenv("DB_USERNAME")
    def dbPassword = System.getenv("DB_PASSWORD")
    
    if (dbHost?.trim()) { 
    
      // If the variable is not empty (CircleCI), read from them
      config.databaseDomainAndName = "$dbHost:3306/$dbName".toString()
      config.databaseUsername = "$dbUser".toString()
      config.databasePassword = "$dbPassword".toString() 
      
    }
    
    // create this property in ext, so it can be used in 'processResources' to replace tokens in resource files
    // which are the files under 'src/main/resources'
    ext.config = config
    ext.jdbcUrl = "jdbc:mysql://$config.databaseDomainAndName?useUnicode=true&amp;characterEncoding=UTF-8"
    ext.dbUser = "$config.databaseUsername"
    ext.dbPassword = "$config.databasePassword"
    
    println "JDBC Url: " + ext.jdbcUrl
    
}

ext.baseDir = "$rootProject.projectDir"
def tomcatBin = "deploy/tomcat7/bin"
def tomcatStart = "$tomcatBin/startup.sh"
def tomcatStop = "$tomcatBin/shutdown.sh"
def tomcatWebappsDir = "deploy/tomcat7/webapps"

task clean (type: Delete, overwrite: true) {

    doFirst {
        println "Cleaning files: $buildDir, $webappRootDir/WEB-INF/classes"
    }

    delete file("$buildDir")
    delete file("$webappRootDir/WEB-INF/classes")
}

task copyDependenciesToLib(type: Sync) {
    from configurations.runtime
    into "$libDir"
}

task explodedWar(type:Copy) {
    // Reuses the copy specification of the war task to mimic its behaviour into the desired destination
    into "$tomcatWebappsDir/ROOT"
    with war
}

task stopTomcat(type:Exec) {
    workingDir 'deploy/tomcat7/bin'
    commandLine './shutdown.sh'
    ignoreExitValue = true
}

task startTomcat(type:Exec) {
   // dependsOn processResources, compileJava, copyDependenciesToLib
   workingDir 'deploy/tomcat7/bin'
   commandLine './startup.sh'
   //ignoreExitValue = true
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}

task restartTomcat() {
    dependsOn stopTomcat, startTomcat
    startTomcat.mustRunAfter stopTomcat
    doFirst {
        Thread.sleep(5000)
    }
}

task stage() {
  dependsOn war
  doFirst {
     println "Running Stage Task"
  }

}

task updateDb() {
  dependsOn update
  doFirst {
      println "Migrations for environment - $project.conf"
  }
}

task devBuild() {
  dependsOn processResources, compileJava, copyDependenciesToLib
  doFirst {
     println "Task devBuild successfully ran"
  }
}

task localTomcat {
    dependsOn stopTomcat, devBuild, startTomcat
    devBuild.mustRunAfter stopTomcat
    updateDb.mustRunAfter devBuild
    startTomcat.mustRunAfter updateDb

    doLast {
       println "Local Tomcat should be running on port 8090"
    }
}
