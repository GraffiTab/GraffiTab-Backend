buildscript {
   
    ext {
        springBootVersion = '1.3.0.RELEASE'
    }
     
    repositories {
        mavenCentral()
    }
    
    dependencies {
        classpath "org.liquibase:liquibase-gradle-plugin:1.1.1"
        classpath "mysql:mysql-connector-java:5.1.27"
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}") 
    }
}

import org.apache.tools.ant.filters.*
apply plugin: 'liquibase'
apply plugin: 'java'
//apply plugin: 'war'
apply plugin: 'spring-boot'

jar {
    baseName = 'graffitab'
    version = '0.1'
    
    manifest {
        attributes 'Main-Class': 'com.graffitab.server.GraffitabApplication'
    }
}

sourceCompatibility = 1.7
targetCompatibility = 1.7

repositories {
    mavenCentral()
} 


// Gradle Tool Window in IntelliJ IDEA:
// https://www.jetbrains.com/idea/help/manipulating-the-tool-windows.html

// Some global properties

def webappRootDir = "src/main/webapp"
ext.configDir = "conf"
ext.localConfigFileName = "config.groovy"
ext.remotesConfigFileName = "environments.groovy"
ext.libDir = file("$webappRootDir/WEB-INF/lib")
sourceSets.main.output.classesDir =  file("$webappRootDir/WEB-INF/classes")
sourceSets.main.output.resourcesDir =  file("$webappRootDir/WEB-INF/classes")

def springVersion = "4.2.3.RELEASE"
def jspVersion = "2.1"
def jstlVersion = "1.1.2"
def servletVersion = "3.0"
def hibernateVersion = "4.3.5.Final"
def c3p0Version = "0.9.1.2"
def tilesVersion = "3.0.0"
def mysqlVersion = "5.1.27"
def jacksonVersion = "2.3.0"
def junitVersion = "4.11"
def commonsCodecVersion = "1.8"
def commonsIoVersion = "2.4"
def cglibVersion = "2.1_3"
def log4jVersion = "2.1"
def slf4jVersion = "1.7.7"
def jUnitVersion = "4.9"
def mockitoVersion = "1.9.5"
def jsonPathVersion = "2.0.0"
def hsqldbVersion = "2.2.8"
def orikaVersion = "1.4.6"

def commonsFileuploadVersion = "1.3.1"
//http://docs.spring.io/spring-security/site/migrate/current/3-to-4/html5/migrate-3-to-4-jc.html
def springSecurityVersion = "4.0.3.RELEASE" 


List jackson = ["com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}",
                "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}"
]

// "org.springframework:spring-webmvc:$springVersion"
// "org.springframework:spring-core:$springVersion"
List spring = [ "org.springframework:spring-tx:$springVersion",
                "org.springframework:spring-orm:$springVersion",
                "org.springframework:spring-test:$springVersion"]

List springSecurity = ["org.springframework.security:spring-security-core:${springSecurityVersion}",
                       "org.springframework.security:spring-security-web:${springSecurityVersion}",
                       "org.springframework.security:spring-security-config:${springSecurityVersion}",
                       "org.springframework.security:spring-security-taglibs:${springSecurityVersion}"]


List log4j = [
        "org.apache.logging.log4j:log4j-1.2-api:$log4jVersion",
        "org.apache.logging.log4j:log4j-core:$log4jVersion",
        "org.apache.logging.log4j:log4j-slf4j-impl:$log4jVersion",
        "org.apache.logging.log4j:log4j-api:$log4jVersion"
]

List slf4j = [
        "org.slf4j:slf4j-api:$slf4jVersion",
        "org.slf4j:slf4j-ext:$slf4jVersion"
]

configurations {

    all.collect { configuration ->
        configuration.exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
}

dependencies {

   compile "javax.servlet:jstl:$jstlVersion",
           "taglibs:standard:$jstlVersion",
           "c3p0:c3p0:$c3p0Version",
           "mysql:mysql-connector-java:$mysqlVersion",
           "org.hibernate:hibernate-core:$hibernateVersion"

   compile ("org.apache.tiles:tiles-core:$tilesVersion") {
          exclude module: "jcl-over-slf4j"
   }

   compile "org.apache.tiles:tiles-jsp:$tilesVersion"

   compile ("org.slf4j:jcl-over-slf4j:$slf4jVersion") {
       exclude module: "slf4j-api"
   }
   
   compile("org.apache.tomcat.embed:tomcat-embed-jasper")

    // Logging
    slf4j.each { artifact ->
        compile artifact, {
            exclude group: 'ch.qos.cal10n'
        }
    }

   compile "commons-io:commons-io:$commonsIoVersion"

   compile spring, jackson, log4j
   
   //springSecurity, jackson, log4j
   
   compile "ma.glasnost.orika:orika-core:$orikaVersion"
   
   compile "commons-fileupload:commons-fileupload:$commonsFileuploadVersion"
   
   // for OAuth 2.0
   compile 'org.springframework.security.oauth:spring-security-oauth2:2.0.8.RELEASE'
   compile 'org.json:json:20151123'
   
   // Spring Boot
   compile 'org.springframework.boot:spring-boot-starter'
   compile 'org.springframework.boot:spring-boot-starter-web'
   compile 'org.springframework.boot:spring-boot-starter-security'
   testCompile 'org.springframework.boot:spring-boot-starter-test'
   
   // For tomcat server, not for embedded
   // providedCompile group: 'javax.servlet', name: 'javax.servlet-api', version: '3.0.1'
   // providedCompile group: 'javax.servlet.jsp', name: 'jsp-api', version: '2.1'
   
   // For an executable and deployable WAR, add this
   // providedCompile "org.springframework.boot:spring-boot-starter-tomcat"

   runtime "mysql:mysql-connector-java:$mysqlVersion"
   
   testCompile "junit:junit:$jUnitVersion"
   testCompile "org.mockito:mockito-core:$mockitoVersion"
   testCompile "com.jayway.jsonpath:json-path:$jsonPathVersion"
   testCompile "org.hsqldb:hsqldb:$hsqldbVersion"
   testCompile "commons-fileupload:commons-fileupload:$commonsFileuploadVersion"
   
}


loadConfiguration()

// == Liquibase ==

liquibase {
  activities {
    main {
      changeLogFile "$rootProject.projectDir/src/main/resources/database-update/database-changelog.xml"
      url "$jdbcUrl"
      username "$dbUser"
      password "$dbPassword"
    }
  }

  // runList = project.ext.runList
  // runList = 'main'
  runList = 'main'
}


processResources {
    filter(ReplaceTokens, tokens: config)
}

//war {
//  archiveName = "graffitab.war"  
//}


/**
 This can be passed from the command line like -Penv=value
*/
def loadConfiguration() {
	
	def localConfigFilePath = "$configDir/$localConfigFileName"
    def localConfigExists = file(localConfigFilePath).exists()
    
    // Temporarily assume heroku if not local file present -- need to setup more env variables in CircleCI / Heroku to detect this
    // and not hardcode it
    def env = hasProperty('env') ? env : ( (localConfigExists) ? 'local' : 'herokuDev')
    
    project.ext.env = env
    
    println "=== Environment is $env ==="
        
    def dbHost = System.getenv("DB_HOST")
    def dbName = System.getenv("DB_NAME")
    def dbUser = System.getenv("DB_USERNAME")
    def dbPassword = System.getenv("DB_PASSWORD")
    
    def config = null
    
    if (dbHost?.trim() || !localConfigExists) { 
      
      // If the variable is not empty (CircleCI) or the local config file does not exist, assume remote deployment
      // Read from env variables     
      println "=== Reading config for remote deployment for $env ==="	
      config = readConfigFile("$configDir/$remotesConfigFileName", env)	
  
      config.databaseDomainAndName = "$dbHost:3306/$dbName".toString()
      config.databaseUsername = "$dbUser".toString()
      config.databasePassword = "$dbPassword".toString() 
      
    } else {
    
      println "=== Reading local deployment config for $env ==="	
      config = readConfigFile(localConfigFilePath, env)
    
    }
    
    // create this property in ext, so it can be used in 'processResources' to replace tokens in resource files
    // which are the files under 'src/main/resources'
    ext.config = config
    ext.jdbcUrl = "jdbc:mysql://$config.databaseDomainAndName?useUnicode=true&amp;characterEncoding=UTF-8"
    ext.dbUser = "$config.databaseUsername"
    ext.dbPassword = "$config.databasePassword"
    
    println "JDBC Url: " + ext.jdbcUrl
    
}

def readConfigFile(configFilePath, environment) {
  def configFile = file("$configFilePath")
  def config = new ConfigSlurper("$environment").parse(configFile.toURL())
  return config		
}

ext.baseDir = "$rootProject.projectDir"
def tomcatWebappsDir = "deploy/tomcat7/webapps"

task clean (type: Delete, overwrite: true) {

    doFirst {
        println "Cleaning files: $buildDir, $webappRootDir/WEB-INF/classes"
    }

    delete file("$buildDir")
    delete file("$webappRootDir/WEB-INF/classes")
}

task copyDependenciesToLib(type: Sync) {
    from configurations.runtime
    into "$libDir"
}

//task explodedWar(type:Copy) {
    // Reuses the copy specification of the war task to mimic its behaviour into the desired destination
//    into "$tomcatWebappsDir/ROOT"
 //   with war
//}

task stopTomcat(type:Exec) {
    workingDir 'deploy/tomcat7/bin'
    commandLine './shutdown.sh'
    ignoreExitValue = true
}

task startTomcat(type:Exec) {
   // dependsOn processResources, compileJava, copyDependenciesToLib
   workingDir 'deploy/tomcat7/bin'
   commandLine './startup.sh'
   //ignoreExitValue = true
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}

task restartTomcat() {
    dependsOn stopTomcat, startTomcat
    startTomcat.mustRunAfter stopTomcat
    doFirst {
        Thread.sleep(5000)
    }
}

task stage() {
  doFirst {
     println "Running Stage Task"
  }

}

task updateDb() {
  dependsOn update
  doFirst {
      println "Migrations for environment - $project.env"
  }
}

task devBuild() {
  dependsOn processResources, compileJava, copyDependenciesToLib
  doFirst {
     println "Task devBuild successfully ran"
  }
}

task localTomcat {
    dependsOn stopTomcat, devBuild, startTomcat
    devBuild.mustRunAfter stopTomcat
    updateDb.mustRunAfter devBuild
    startTomcat.mustRunAfter updateDb

    doLast {
       println "Local Tomcat should be running on port 8090"
    }
}
